<?xml version="1.0" encoding="utf-8" ?>
<svg
	xmlns="http://www.w3.org/2000/svg"
	xmlns:xlink="http://www.w3.org/1999/xlink"
	onload="drawOutlineBefore(document.getElementById('wow'),{'class':'outline'});"
	>
	<title>The WoW gradient</title>
	<desc>Part 3 of Week 2 assignment by Hugh Barnes towards W3C SVG course, October 2010.</desc>
	<style type="text/css"><![CDATA[
	text {
		font-size: 100pt;
	}
	.w {
		font-family: "Century Schoolbook Bold", serif; /* FIXME */
		stroke: black;
	}
	#w1 {
		fill: url(#gyr);
	}
	#w2 {
		fill: url(#ryg);
	}
	.outline {
		stroke-width: 2;
		fill: url(#rygyr);
		stroke: black;
	}
	]]></style>

	<!-- 
		Comments draft:
		An apparent surprising trick here has been to get the gradient fill within the letters after adding the background fill. When I set the fill no a non-gradient (colour), it renders, so it seems it's more than an element ordering issue. Stop-opacity on w class has no effect as expected. Is it a firefox bug? Nothing on google (but that is not conclusive). Then I figured it. I need to be looking more closely because my fill in the letters was the wrong way around, so it was the same as its background and of course blends in perfectly. I also notice when I fix this that there needs to be a yellow stop in the middle.
	-->

	<script type="application/ecmascript"><![CDATA[

		/* function getBBoxAsRectElement from http://my.opera.com/MacDev_ed/blog/2009/01/21/getting-boundingbox-of-svg-elements */
		var svgns = document.documentElement.namespaceURI; //this line modified slightly so not hardcoded :)
		function getBBoxAsRectElement(elm)
		{
			var bb = elm.getBBox();
			var rect = document.createElementNS(svgns, "rect");
			rect.x.baseVal.value = bb.x;
			rect.y.baseVal.value = bb.y;
			rect.width.baseVal.value = bb.width;
			rect.height.baseVal.value = bb.height;
			return rect;
		}

		/* returns a <rect/> element which is an outline of the supplied element nd, and with any attributes provided in the "associative array" supplied as attrs */
		function getOutline(nd,attrs) { //attrs: too python? :D
			attrs = ( arguments.length == 1 ? {} : attrs);

			var bbox=getBBoxAsRectElement(nd);

			/* provide styling/identifying hooks (and indeed any other attributes, why not?)  */
			for(var name in attrs) {
				bbox.setAttribute(name,attrs[name]);
			}

			if (typeof(attrs['class']) == "undefined") {
				/* kind of making assumptions here but there should be something that renders by default */
				bbox.setAttribute("fill","none");
				bbox.setAttribute("stroke","black");
				bbox.setAttribute("stroke-width","1");
			}
			// still not sure if the above-type styles (esp fill:none) should be set here and require overriding or allow a blank slate for styling

			return bbox;
		}

		/* draws an outline of a node after it */
		/* this and drawOutlineBefore might have been done as parameters but I don't want to be faffing around with messy optional parameter handling */
		function drawOutlineAfter(nd,attrs) {
			attrs = ( arguments.length == 1 ? {} : attrs);
			var outline = getOutline(nd,attrs);
			var nextSiblingNode = nd.nextSibling;
			if (nextSiblingNode) {
				nd.parentNode.insertBefore(outline,nextSiblingNode);  // just in case it matters that this is appended directly after nd
			}
			else {
				nd.parentNode.appendChild(outline);
			}
		}

		/* draws an outline of a node before it */
		function drawOutlineBefore(nd,attrs) {
			attrs = ( arguments.length == 1 ? {} : attrs);
			var outline = getOutline(nd,attrs);
			nd.parentNode.insertBefore(outline,nd);
		}

		function getCentroid(nd) {
			var bb = nd.getBBox();
			var centroid = document.documentElement.createSVGPoint();
			centroid.x = bb.x + bb.width / 2;
			centroid.y = bb.y + bb.height / 2;
			return centroid;
		}

	]]></script>

	<defs>
		<linearGradient id="ryg" >
			<stop offset="0" stop-color="red" />
			<stop offset="0.5" stop-color="yellow" />
			<stop offset="1" stop-color="forestgreen" />
		</linearGradient>

		<!-- suspect I can do this reversal of the above gradient with Javascript but that's for another day -->
		<linearGradient id="gyr" >
			<stop offset="0" stop-color="forestgreen" />
			<stop offset="0.5" stop-color="yellow" />
			<stop offset="1" stop-color="red" />
		</linearGradient>

		<linearGradient id="rygyr" >
			<stop offset="0" stop-color="red" />
			<stop offset="0.25" stop-color="yellow" />
			<stop offset="0.5" stop-color="forestgreen" />
			<stop offset="0.75" stop-color="yellow" />
			<stop offset="1" stop-color="red" />
		</linearGradient>

		<text id="w" class="w" x="100" y="100">w</text>
	</defs>

	<g id="wow">
		<use xlink:href="#w" id="w1" transform="rotate(10,100,100)" />
		<use xlink:href="#w" id="w2" transform="translate(130,20),rotate(-10,100,100)" />
		<text class="o" id="TMP" x="180" y="110">o</text> <!-- transform="rotate(90,240,100)" -->
	</g>

	<script>alert(getCentroid(document.getElementById('TMP')).y);</script>

</svg>
